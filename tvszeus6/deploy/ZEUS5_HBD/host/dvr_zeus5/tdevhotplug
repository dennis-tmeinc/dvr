#!/bin/sh

# Changes:
# 09/18/2009 Harrison
#   1. Added support for WPA/WPA2 encryption
# 05/19/2010 Harrison
#   1. Added support DHCP

PATH=$PATH:/mnt/nand/dvr

# a bit of sync
for lock in 1 2 3 4 5 6 7 8 9 10 
do
  if [ -f /var/dvr/hotpluglock ] ; then
    sleep 1
  fi
done
echo 1 > /var/dvr/hotpluglock


#  dvrsvr information?
dvrpidfile=/var/dvr/dvrsvr.pid

#  dvrsvr current working disk.
dvrcurdisk=/var/dvr/dvrcurdisk

# where dvr disks mounted.
dvrmountdir=/var/dvr/disks

# hotplug disk mounted here.
xmountdir=/var/dvr/xdisk

devpath=/sys$2
devname=${devpath##*/}

subsys=$2
subsys=${subsys#/}
subsys=${subsys%%/*}

if [ -f /var/dvr/TZ ] ; then
  TZ=`cat /var/dvr/TZ`
  export TZ
fi

case $1 in
    "add")

        # hotplug block device (USB disk)
        if [ ${subsys} = "block" -a -r ${devpath}/dev  ] ; then
            devnum=`cat ${devpath}/dev`
            # generate device if not exist
            if [ ! -e /dev/${devname} ] ; then
                mknod /dev/${devname} b ${devnum%%:*} ${devnum##*:}
            fi

            partition=${devname##*[a-z]}
            if [ ${partition:-0} -ge 1 -a ! -f ${xmountdir}/mount_${devname} ]; then
                mkdir -p ${xmountdir}/${devname}

                if mount /dev/${devname} ${xmountdir}/${devname} -t ext3  -o noatime,data=ordered ; then
                    if umount ${xmountdir}/${devname} ; then
                        rm -r ${xmountdir}/${devname}
                    fi

                    if [ ! -f ${xmountdir}/mount_${devname} ] ; then
                        mkdir -p ${dvrmountdir}/d_${devname}
                        if mount /dev/${devname} ${dvrmountdir}/d_${devname} -t ext3 -o noatime,data=ordered ; then
                            # mark mounted disk
                            echo  ${dvrmountdir}/d_${devname} > ${xmountdir}/mount_${devname}
                        fi
                    fi

                elif mount /dev/${devname} ${xmountdir}/${devname} -t ext2 ; then

                    if umount ${xmountdir}/${devname} ; then
                        rm -r ${xmountdir}/${devname}
                    fi

                    if [ ! -f ${xmountdir}/mount_${devname} ] ; then
                        mkdir -p ${dvrmountdir}/d_${devname}
                        if mount /dev/${devname} ${dvrmountdir}/d_${devname} -t ext2 -o noatime ; then
                            # mark mounted disk
                            echo  ${dvrmountdir}/d_${devname} > ${xmountdir}/mount_${devname}
                        fi
                    fi

                elif mount /dev/${devname} ${xmountdir}/${devname} -o shortname=winnt ; then

                    # dvr recording disk ?
                    if [ -f ${xmountdir}/${devname}/dvrdisk -o -f ${xmountdir}/${devname}/DVRDISK ] ; then

                        if umount ${xmountdir}/${devname} ; then
                            rm -r ${xmountdir}/${devname}
                        fi

                        if [ ! -f ${xmountdir}/mount_${devname} ] ; then
                            # do dosfs check here
                            dosfsck -a /dev/${devname}

                            mkdir -p ${dvrmountdir}/d_${devname}
                            mount /dev/${devname} ${dvrmountdir}/d_${devname} -o shortname=winnt
                            rm -f ${dvrmountdir}/d_${devname}/FSCK*
                        
                            # mark mounted disk
                            echo  ${dvrmountdir}/d_${devname} > ${xmountdir}/mount_${devname}
                        fi

                        
                    # autorun disk .. key ...
                    elif [ -f ${xmountdir}/${devname}/key ] ; then

                        if volumeid /dev/${devname} ${xmountdir}/${devname} ; then
                            echo Key check passed
                            echo ${xmountdir}/${devname} > ${xmountdir}/mount_${devname}
                            
                            USBROOT=${xmountdir}/${devname} 
                            export USBROOT

                            # check directory 266
                            if [ -d ${USBROOT}/266 ]; then 
                                EXEDIR=${USBROOT}/266
                            else
                                EXEDIR=${USBROOT}
                            fi

                            export EXEDIR

                            for autoruncheck in `ls ${EXEDIR}/*.check`
                            do
				echo md5check on ${autoruncheck}...
                                if md5check ${autoruncheck} ; then
				    echo mdcheck pased on ${autoruncheck}
                                    autorun_file=${autoruncheck%.check}.autorun
                                    if [ -x ${autorun_file} ] ; then
                                        # run autorun file
                                        ${autorun_file}  &
                                    fi
                                fi
                            done

                            cd /

                        else    # no autorun file

                            echo Key check failed
                            cd /
                            if umount ${xmountdir}/${devname} ; then
                                rm -r ${xmountdir}/${devname}
                            fi
                          
                        fi

                    # other disk
                    else
                        if umount ${xmountdir}/${devname} ; then
                            rm -r ${xmountdir}/${devname}
                        fi
                    fi

                else    # can't mount this disk

                    rm -r ${xmountdir}/${devname}

                fi      # mounted
            fi      # partitions 

        fi	# block device 

        # chec usb serial adapter
        if [ -r ${devpath}/dev -a ${devname%[0-9]} = "ttyUSB" ]; then
            devnum=`cat ${devpath}/dev`
            mknod /dev/${devname} c ${devnum%%:*} ${devnum##*:}
        fi

        # check usb wifi
        if [ ${devname%[0-9]} = "rausb" ]; then	
	    wifi_essid=`cfg get network wifi_essid`
	    wifi_enc=`cfg get network wifi_enc`
	    wifi_key=`cfg get network wifi_key`
	    wifi_proto=`cfg get network wifi_proto`
            wifi_ip=`cfg get network wifi_ip`
            wifi_mask=`cfg get network wifi_mask`

            # wifi_proto - "0" or not set:static, "1":dhcp, "2":disabled
	    if [ "$wifi_proto" = "" -o "$wifi_proto" = "0" -o "$wifi_proto" = "1" ] ; then
		if [ -n "$wifi_essid" ] ; then
		    ifconfig ${devname} up
		
		    case $wifi_enc in
			"0")
			    iwpriv ${devname} set NetworkType=Infra
			    iwpriv ${devname} set AuthMode=OPEN
			    iwpriv ${devname} set EncrypType=NONE
			    iwpriv ${devname} set SSID=$wifi_essid
			    ;;
			"1")
			    iwpriv ${devname} set NetworkType=Infra
			    iwpriv ${devname} set AuthMode=OPEN
			    iwpriv ${devname} set EncrypType=WEP
			    iwpriv ${devname} set Key1=$wifi_key
			    iwpriv ${devname} set DefaultKeyID=1
			    iwpriv ${devname} set SSID=$wifi_essid
			    ;;
			"2")
			    iwpriv ${devname} set NetworkType=Infra
			    iwpriv ${devname} set AuthMode=SHARED
			    iwpriv ${devname} set EncrypType=WEP
			    iwpriv ${devname} set Key1=$wifi_key
			    iwpriv ${devname} set DefaultKeyID=1
			    iwpriv ${devname} set SSID=$wifi_essid
			    ;;
			"3")
			    iwpriv ${devname} set NetworkType=Infra
			    iwpriv ${devname} set AuthMode=WEPAUTO
			    iwpriv ${devname} set EncrypType=WEP
			    iwpriv ${devname} set Key1=$wifi_key
			    iwpriv ${devname} set DefaultKeyID=1
			    iwpriv ${devname} set SSID=$wifi_essid
			    ;;
			"4")
			    /davinci/iwpriv ${devname} set NetworkType=Infra
			    /davinci/iwpriv ${devname} set AuthMode=WPAPSK
			    /davinci/iwpriv ${devname} set EncrypType=TKIP
			    /davinci/iwpriv ${devname} set SSID=$wifi_essid
			    /davinci/iwpriv ${devname} set WPAPSK=$wifi_key
			    /davinci/iwpriv ${devname} set SSID=$wifi_essid
			    ;;
			"5")
			    iwpriv ${devname} set NetworkType=Infra
			    iwpriv ${devname} set AuthMode=WPAPSK
			    iwpriv ${devname} set EncrypType=AES
			    iwpriv ${devname} set SSID=$wifi_essid
			    iwpriv ${devname} set WPAPSK=$wifi_key
			    iwpriv ${devname} set SSID=$wifi_essid
			    ;;
			"6")
			    /davinci/iwpriv ${devname} set NetworkType=Infra
			    /davinci/iwpriv ${devname} set AuthMode=WPA2PSK
			    /davinci/iwpriv ${devname} set EncrypType=TKIP
			    /davinci/iwpriv ${devname} set SSID=$wifi_essid
			    /davinci/iwpriv ${devname} set WPAPSK=$wifi_key
			    /davinci/iwpriv ${devname} set SSID=$wifi_essid
			    ;;
			"7")
			    iwpriv ${devname} set NetworkType=Infra
			    iwpriv ${devname} set AuthMode=WPA2PSK
			    iwpriv ${devname} set EncrypType=AES
			    iwpriv ${devname} set SSID=$wifi_essid
			    iwpriv ${devname} set WPAPSK=$wifi_key
			    iwpriv ${devname} set SSID=$wifi_essid
			    ;;
			*)
			    ;;
		    esac
		    
		    if [ "$wifi_proto" = "" -o "$wifi_proto" = "0" ] ; then
			ifconfig ${devname} up ${wifi_ip}
			ifconfig ${devname} netmask ${wifi_mask}
			ifconfig ${devname} broadcast `broadcast ${wifi_ip} ${wifi_mask}`
		    else
                        udhcpc -i rausb0 -s /mnt/nand/dvr/udhcpc.sh -q -p /var/dvr/udhcpc.pid -H `cfg get system hostname` &
                    fi
		fi #essid
	    fi #proto
        fi #rausb

        ;;

    "remove")
        if [ ${subsys} = "block" -a -r ${xmountdir}/mount_${devname} ]; then

            mountdir=`cat ${xmountdir}/mount_${devname}`
            dvrsvrdown=0
            dvrpid=0

            # suspend dvrsvr
            if [ -f ${dvrpidfile} -a -f ${dvrcurdisk} ]; then
                dvrdisk=`cat ${dvrcurdisk}`
                if [ ${dvrdisk} = ${mountdir} ] ; then
                    dvrpid=`cat ${dvrpidfile}`
                    echo "dvrsvr down" > /tmp/dvrsvrdown
                    dvrsvrdown=1
                fi
            fi

            rm ${xmountdir}/mount_${devname}

            for x in 1 2 3 4 5 6 7 8 ; do
                if [ -d ${mountdir} ] ; then
                   sync;
                   if umount ${mountdir} ; then
                      rm -r ${mountdir}
                   else
                      sleep 1
                   fi
                else
                   break
                fi ;
            done ;

            # restart dvrsvr
            if [ $dvrsvrdown = 1 ]; then
                echo "dvrsvr up" > /tmp/dvrsvrup
            fi

        fi;
        ;;
esac 

# unlock hotplug
rm /var/dvr/hotpluglock
