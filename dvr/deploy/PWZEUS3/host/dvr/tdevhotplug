#!/bin/sh
# Hot-plug script for Eagle32 project

devpath=/sys$2
devname=${devpath##*/}

devclass=$2
devclass=${devclass#/}
devclass=${devclass%%/*}

subsys=$2
subsys=${subsys#/}
subsys=${subsys#*/}
subsys=${subsys%%/*}

if [ ${devclass} != "block" -a ${devclass} != "class"  ] ; then
   exit
fi
vardir=/var/dvr
lockfile=${vardir}/lock_${devclass}_${subsys}_${devname}_$1
if [ -f ${lockfile} ]; then
    exit
fi

echo 1 > ${lockfile}

#setup DIRs
PATH=/davinci:/davinci/dvr:/bin:/sbin:${PATH}
export PATH
app_dir=/davinci/dvr
id_file=/davinci/ID/APPID

#  dvrsvr information?
dvrpidfile=${vardir}/dvrsvr.pid

#  dvrsvr current working disk.
dvrcurdisk=${vardir}/dvrcurdisk

# where dvr disks mounted.
dvrmountdir=${vardir}/disks

if [ ! -d ${dvrmountdir} ] ; then
    mkdir ${dvrmountdir}
fi

# where archive disks mounted.
dvrarchdir=${vardir}/arch

if [ ! -d ${dvrarchdir} ] ; then
    mkdir ${dvrarchdir}
fi

# hotplug disk mounted here.
xmountdir=${vardir}/xdisk

if [ -f ${vardir}/TZ ] ; then
  TZ=`cat ${vardir}/TZ`
  export TZ
fi

case $1 in
    "add")

	# hotplug block device (USB disk)
	if [ ${devclass} = "block" -a -r ${devpath}/dev  ] ; then
	    devnum=`cat ${devpath}/dev`
	    # generate device if not exist
	    if [ -e /dev/${devname} ] ; then
		rm /dev/${devname}
	    fi
	    mknod /dev/${devname} b ${devnum%%:*} ${devnum##*:}

	    partition=${devname##*[a-z]}
	    if [ ${partition:-0} -ge 1 -a ! -f ${xmountdir}/mount_${devname} ]; then

		echo  ${xmountdir}/${devname} > ${xmountdir}/mount_${devname}
		mkdir -p ${xmountdir}/${devname}

		if mount /dev/${devname} ${xmountdir}/${devname} -t ext3 -o noatime,data=ordered ; then
		    if [ -f ${xmountdir}/${devname}/archive ] ; then
			d_mount=${dvrarchdir}/d_${devname}
		    else
			d_mount=${dvrmountdir}/d_${devname}
		    fi

		    if umount ${xmountdir}/${devname} ; then
			rm -r ${xmountdir}/${devname}
			mkdir -p ${d_mount}
			if mount /dev/${devname} ${d_mount} -t ext3 -o noatime,data=ordered ; then
			    # mark mounted disk
			    echo  ${d_mount} > ${xmountdir}/mount_${devname}
			else
			    rm ${xmountdir}/mount_${devname}
			fi

		    fi

		elif mount /dev/${devname} ${xmountdir}/${devname} -t ext2 -o noatime ; then
		    if [ -f ${xmountdir}/${devname}/archive ] ; then
			d_mount=${dvrarchdir}/d_${devname}
		    else
			d_mount=${dvrmountdir}/d_${devname}
		    fi

		    if umount ${xmountdir}/${devname} ; then
			rm -r ${xmountdir}/${devname}
			mkdir -p ${d_mount}
			if mount /dev/${devname} ${d_mount} -t ext2 -o noatime ; then
			    # mark mounted disk
			    echo  ${d_mount} > ${xmountdir}/mount_${devname}
			else
			    rm ${xmountdir}/mount_${devname}
			fi

		    fi

		elif mount /dev/${devname} ${xmountdir}/${devname} -o shortname=winnt ; then

		    # dvr recording disk ?
		    if [ -f ${xmountdir}/${devname}/dvrdisk -o -f ${xmountdir}/${devname}/DVRDISK ] ; then

			if umount ${xmountdir}/${devname} ; then

			    d_mount=${dvrmountdir}/d_${devname}

			    rm -r ${xmountdir}/${devname}

			    # do dosfs check here
			    dosfsck -a /dev/${devname}

			    mkdir -p ${d_mount}
			    if mount /dev/${devname} ${d_mount} -o shortname=winnt ; then
				rm -f ${d_mount}/FSCK*
				# mark mounted disk
				echo  ${d_mount} > ${xmountdir}/mount_${devname}
			    else
				rm ${xmountdir}/mount_${devname}
			    fi
			fi

		    # dvr archive disk ?
		    elif [ -f ${xmountdir}/${devname}/archive -o -f ${xmountdir}/${devname}/ARCHIVE ] ; then

			if umount ${xmountdir}/${devname} ; then

			    d_mount=${dvrarchdir}/d_${devname}

			    rm -r ${xmountdir}/${devname}

			    # do dosfs check here
			    dosfsck -a /dev/${devname}

			    mkdir -p ${d_mount}
			    if mount /dev/${devname} ${d_mount} -o shortname=winnt ; then
				rm -f ${d_mount}/FSCK*
				# mark mounted disk
				echo  ${d_mount} > ${xmountdir}/mount_${devname}
			    else
				rm ${xmountdir}/mount_${devname}
			    fi
			fi

		    # autorun disk .. key ...
		    elif [ -f ${xmountdir}/${devname}/key ] ; then

			if volumeid /dev/${devname} ${xmountdir}/${devname} ; then
			    # key check passed
			    echo ${xmountdir}/${devname} > ${xmountdir}/mount_${devname}

			    USBROOT=${xmountdir}/${devname}
			    export USBROOT

			    # check directory 510
			    if [ -d ${USBROOT}/510 ]; then
				EXEDIR=${USBROOT}/510
			    else
				EXEDIR=${USBROOT}
			    fi

			    export EXEDIR
			    cd ${EXEDIR}

			    for autoruncheck in `ls *.check`
			    do
				if md5check ${autoruncheck} ; then
				    autorun_file=${autoruncheck%.check}.autorun
				    if [ -r ${autorun_file} ] ; then
					# run autorun file
					mkdir ${xmountdir}/${devname}_run
					cp -f ${autorun_file} ${xmountdir}/${devname}_run
					cd ${xmountdir}/${devname}_run
					chmod a+x ${autorun_file}
					./${autorun_file} &
				    fi
				fi
			    done

			    cd /

			else    # no autorun file

			    cd /
			    if umount ${xmountdir}/${devname} ; then
				rm -r ${xmountdir}/${devname}
				rm ${xmountdir}/mount_${devname}
			    fi

			fi

		    # autorun disk by usbkey
		    elif [ -f ${xmountdir}/${devname}/usbkey ] ; then

			# check auto runable disk
			cd ${xmountdir}/${devname}		# required to be current dir, so usbcheck can read FW file.

			autorun_appid=`cat ${id_file}`
			autorun_file_app=`usbcheck /dev/${devname%[1-9]} usbkey ${autorun_appid}`
			autorun_file=`usbcheck /dev/${devname%[1-9]} usbkey`
			if [ -f ${xmountdir}/${devname}/${autorun_file} ] ; then

			    echo ${xmountdir}/${devname} > ${xmountdir}/mount_${devname}

			    mkdir /home/usbautorun
			    cd /home/usbautorun
			    # run autorun file
			    EXEDIR=${xmountdir}/${devname}
			    export EXEDIR
			    USBROOT=${EXEDIR}
			    export USBROOT
			    ${EXEDIR}/${autorun_file}  &

			elif [ -f ${xmountdir}/${devname}/${autorun_file_app} ] ; then

			    echo ${xmountdir}/${devname} > ${xmountdir}/mount_${devname}

			    mkdir /home/usbautorun
			    cd /home/usbautorun
			    # run autorun file
			    EXEDIR=${xmountdir}/${devname}
			    export EXEDIR
			    USBROOT=${EXEDIR}
			    export USBROOT
			    ${EXEDIR}/${autorun_file}  &

			else    # no autorun file

			    cd /
			    if umount ${xmountdir}/${devname} ; then
				rm -r ${xmountdir}/${devname}
			    fi

			fi

		    # other disk
		    else
			if umount ${xmountdir}/${devname} ; then
			    rm -r ${xmountdir}/${devname}
			fi
		    fi

		else    # can't mount this disk

		    rm ${xmountdir}/mount_${devname}
		    rm -r ${xmountdir}/${devname}

		fi      # mounted
	    fi      # partitions

	fi	# block device

	# charactor device
	if [ ${devclass} = "class" -a -r ${devpath}/dev  ] ; then
	    devnum=`cat ${devpath}/dev`
	    # generate device if not exist
	    if [ -e /dev/${devname} ] ; then
		rm /dev/${devname}
	    fi
	    mknod /dev/${devname} c ${devnum%%:*} ${devnum##*:}
	fi

	# check usb wifi
	if [  ${devclass} = "class" -a ${subsys} = "net" -a -d ${devpath}/wireless ]; then
	    echo ${devname} > ${vardir}/wifidev
	    sleep 2

	    wifi_essid=`cfg get network wifi_essid`
	    wifi_enc=`cfg get network wifi_enc`
	    wifi_key=`cfg get network wifi_key`
	    wifi_ip=`cfg get network wifi_ip`
	    wifi_mask=`cfg get network wifi_mask`
	    wifi_bcast=`cfg get network wifi_bcast`

	    ifconfig ${devname} up ${wifi_ip}
	    ifconfig ${devname} netmask ${wifi_mask}

		    case ${wifi_enc} in
		    "0")
			# Disable (no enc)
			iwpriv ${devname} set NetworkType=Infra
		    iwpriv ${devname} set AuthMode=OPEN
		    iwpriv ${devname} set EncrypType=NONE
		    iwpriv ${devname} set SSID=${wifi_essid}
		    ;;
		    "1")
			# WEP open
		    iwpriv ${devname} set NetworkType=Infra
		    iwpriv ${devname} set AuthMode=OPEN
		    iwpriv ${devname} set EncrypType=WEP
		    iwpriv ${devname} set Key1=${wifi_key}
		    iwpriv ${devname} set DefaultKeyID=1
			iwpriv ${devname} set SSID=${wifi_essid}
			;;
		    "2")
			# WEP shared
		    iwpriv ${devname} set NetworkType=Infra
		    iwpriv ${devname} set AuthMode=SHARED
		    iwpriv ${devname} set EncrypType=WEP
		    iwpriv ${devname} set Key1=$wifi_key
		    iwpriv ${devname} set DefaultKeyID=1
			iwpriv ${devname} set SSID=$wifi_essid
			;;
		    "3")
			# WEP auto
		    iwpriv ${devname} set NetworkType=Infra
		    iwpriv ${devname} set AuthMode=WEPAUTO
		    iwpriv ${devname} set EncrypType=WEP
		    iwpriv ${devname} set Key1=$wifi_key
		    iwpriv ${devname} set DefaultKeyID=1
			iwpriv ${devname} set SSID=$wifi_essid
			;;
		    "4")
			# WPA Personal TKIP
		    iwpriv ${devname} set NetworkType=Infra
			iwpriv ${devname} set AuthMode=WPAPSK
			iwpriv ${devname} set EncrypType=TKIP
			iwpriv ${devname} set SSID=$wifi_essid
			iwpriv ${devname} set WPAPSK=$wifi_key
			iwpriv ${devname} set SSID=$wifi_essid
			;;
		    "5")
			# WPA Personal AES
		    iwpriv ${devname} set NetworkType=Infra
		    iwpriv ${devname} set AuthMode=WPAPSK
		    iwpriv ${devname} set EncrypType=AES
			iwpriv ${devname} set SSID=$wifi_essid
		    iwpriv ${devname} set WPAPSK=$wifi_key
			iwpriv ${devname} set SSID=$wifi_essid
			;;
		    "6")
			# WPA2 Personal TKIP
		    iwpriv ${devname} set NetworkType=Infra
		    iwpriv ${devname} set AuthMode=WPA2PSK
		    iwpriv ${devname} set EncrypType=TKIP
			iwpriv ${devname} set SSID=$wifi_essid
		    iwpriv ${devname} set WPAPSK=$wifi_key
			iwpriv ${devname} set SSID=$wifi_essid
			;;
		    "7")
			# WPA2 Personal AES
		    iwpriv ${devname} set NetworkType=Infra
		    iwpriv ${devname} set AuthMode=WPA2PSK
		    iwpriv ${devname} set EncrypType=AES
			iwpriv ${devname} set SSID=$wifi_essid
		    iwpriv ${devname} set WPAPSK=$wifi_key
			iwpriv ${devname} set SSID=$wifi_essid
			;;
		    *)
			;;
		    esac

	    ifconfig ${devname} up ${wifi_ip}
	    ifconfig ${devname} netmask ${wifi_mask}
	    if [ -n "${wifi_bcast}" ] ; then
		ifconfig ${devname} broadcast ${wifi_bcast}
	    fi

	    wifi_dhcp=`cfg get network wifi_dhcp`
	    if [ ${wifi_dhcp} = "1" ]; then
		# to use dhcp on wifi
		udhcpc -b -p ${vardir}/wifiudhcpc.pid -i ${devname} -s ${vardir}/udhcpc.script
	    fi

	fi

	;;

    "remove")

	if [ ${devclass} = "block" -a -r ${xmountdir}/mount_${devname} ]; then

	    mountdir=`cat ${xmountdir}/mount_${devname}`
	    dvrsvrdown=0
	    dvrpid=0

	    # suspend dvrsvr
	    if [ -f ${dvrpidfile} -a -f ${dvrcurdisk} ]; then
		dvrdisk=`cat ${dvrcurdisk}`
		if [ ${dvrdisk} = ${mountdir} ] ; then
		    dvrpid=`cat ${dvrpidfile}`
		    kill -USR1 ${dvrpid}
		    for x in 1 2 3 4 5 6 7 8 9 10 ; do
			if [ -f ${dvrcurdisk} ]; then
			    sleep 3
			else
			    break
			fi
		    done
		    dvrsvrdown=1
		fi
	    fi

	    if [ -d ${xmountdir}/${devname}_run ] ; then
		rm -r ${xmountdir}/${devname}_run
	    fi

	    for x in 1 2 3 4 5 6 7 8 ; do
		if [ -d ${mountdir} ] ; then
		   sync;
		   if umount ${mountdir} ; then
		      rm -r ${mountdir}
		   else
		      sleep 1
		   fi
		else
		   break
		fi ;
	    done ;

	    # restart dvrsvr
	    if [ $dvrsvrdown = 1 ]; then
		kill -USR2 $dvrpid
	    fi

	    rm ${xmountdir}/mount_${devname}

	fi;

	# remove wifi interface
	if [  ${devclass} = "class" -a ${subsys} = "net" ]; then
	    if [ -f ${vardir}/wifidev ] ; then
		wifidev=`cat ${vardir}/wifidev`
		if [ ${wifidev} = ${devname} ]; then
		    rm ${vardir}/wifidev
		fi
	    fi ;

	    if [ -f ${vardir}/wifiudhcpc.pid ] ; then
		kill `cat ${vardir}/wifiudhcpc.pid`
	    fi
	fi;

	;;
esac

# unlock hotplug
rm ${lockfile}
